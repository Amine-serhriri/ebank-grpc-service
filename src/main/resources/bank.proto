syntax="proto3";
option java_package="org.sid.bankgrpcservice.grpc.stub";
enum AccountType{
  Current_Account=0;
  Saving_Account=1;
}
enum AccountState{
  Created=0;
  Activated=1;
  Suspended=2;
  Blocked = 3 ;
}
enum TransactionType{
  DEBIT=0;
  CREDIT=1;
}
enum TransactionStatus{
  PENDING=0;
  EXECUTED=1;
  REJECTED=2;
}

message BankAccount {
  string accountId = 1 ;
  double balance= 2 ;
  int64 createdAt =3 ;
  AccountType Type = 4 ;
  AccountState state = 5;
}
message GetBankAccountRequest{
  string accountId = 1;
}
message GetBankAccountResponse{
  BankAccount BankAccount = 1 ;
}
message GetListAccountRequest{}
message GetListAccountResponse{
  repeated BankAccount account =1;
}
message ConvertCurrencyRequest{
  string currencyFrom=1;
  string currencyTo=2;
  double amount=3;
}
message ConvertCurrencyResponse{
  string currencyFrom=1;
  string currencyTo=2;
  double amount=3;
  double conversionResult =4;
}
message Transaction{
  int64 id=1;
  string accountId=2;
  int64 timestamp=3;
  double amount=4;
  TransactionType type=5;
  TransactionStatus status=6;
}
message GetStreamOfTransactionRequest{
  string accountId=1;

}
message PerformStreamOfTransactionsResponse{
  double totalTransactionAmount=1;
  double totalCreditTransactionAmount=2;
  double totalDebitTransactionAmount =3;
  double executedTransactionCount=4;
}

service BankService{
  rpc getBankAccount(GetBankAccountRequest) returns(GetBankAccountResponse); //unary Model
  rpc getListAccount(GetListAccountRequest) returns (GetListAccountResponse); //unary Model
  rpc convertCurrency(ConvertCurrencyRequest)returns (ConvertCurrencyResponse);//unary Model
  //server Streaming
  rpc getStreamOfTransaction(GetStreamOfTransactionRequest)returns(stream Transaction);
  //Client Streaming
  rpc performStreamOfTransaction(stream Transaction) returns (PerformStreamOfTransactionsResponse);
  //bidirectional Streaming
  rpc executeStreamOfTransaction(stream Transaction) returns (stream Transaction);
}